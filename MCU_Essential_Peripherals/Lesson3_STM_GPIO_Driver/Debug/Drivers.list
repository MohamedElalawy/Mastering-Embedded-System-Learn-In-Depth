
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004f0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000620  08000628  00010628  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000620  08000620  00010628  2**0
                  CONTENTS
  4 .ARM          00000000  08000620  08000620  00010628  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000620  08000628  00010628  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000620  08000620  00010620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000624  08000624  00010624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010628  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000628  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000628  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010628  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007f1  00000000  00000000  00010651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002d9  00000000  00000000  00010e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000044c  00000000  00000000  0001111b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  00011568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000098  00000000  00000000  00011628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001b9c  00000000  00000000  000116c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000e3a  00000000  00000000  0001325c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000075e2  00000000  00000000  00014096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001b678  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000023c  00000000  00000000  0001b6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000608 	.word	0x08000608

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000608 	.word	0x08000608

08000170 <clock_init>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void clock_init(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]

}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <gpio_init>:

void gpio_init(){
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
	GPIO_Pin_Config_t Pin_Config;
	Pin_Config.GPIO_Pin_Number = GPIO_PIN_1;
 800019e:	2302      	movs	r3, #2
 80001a0:	80bb      	strh	r3, [r7, #4]
	Pin_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80001a2:	2301      	movs	r3, #1
 80001a4:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &Pin_Config);
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	4814      	ldr	r0, [pc, #80]	; (80001fc <gpio_init+0x64>)
 80001ac:	f000 f960 	bl	8000470 <MCAL_GPIO_Init>


	Pin_Config.GPIO_Pin_Number = GPIO_PIN_1;
 80001b0:	2302      	movs	r3, #2
 80001b2:	80bb      	strh	r3, [r7, #4]
	Pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001b4:	2304      	movs	r3, #4
 80001b6:	71bb      	strb	r3, [r7, #6]
	Pin_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001b8:	2301      	movs	r3, #1
 80001ba:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &Pin_Config);
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	4619      	mov	r1, r3
 80001c0:	480f      	ldr	r0, [pc, #60]	; (8000200 <gpio_init+0x68>)
 80001c2:	f000 f955 	bl	8000470 <MCAL_GPIO_Init>


	Pin_Config.GPIO_Pin_Number = GPIO_PIN_13;
 80001c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ca:	80bb      	strh	r3, [r7, #4]
	Pin_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80001cc:	2301      	movs	r3, #1
 80001ce:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &Pin_Config);
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4619      	mov	r1, r3
 80001d4:	4809      	ldr	r0, [pc, #36]	; (80001fc <gpio_init+0x64>)
 80001d6:	f000 f94b 	bl	8000470 <MCAL_GPIO_Init>


	Pin_Config.GPIO_Pin_Number = GPIO_PIN_13;
 80001da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001de:	80bb      	strh	r3, [r7, #4]
	Pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001e0:	2304      	movs	r3, #4
 80001e2:	71bb      	strb	r3, [r7, #6]
	Pin_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &Pin_Config);
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	4619      	mov	r1, r3
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <gpio_init+0x68>)
 80001ee:	f000 f93f 	bl	8000470 <MCAL_GPIO_Init>

}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00

08000204 <delay>:
void delay(int time) {
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < time; i++) {
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
 8000210:	e00b      	b.n	800022a <delay+0x26>
        for (int j = 0; j < 255; j++);
 8000212:	2300      	movs	r3, #0
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	e002      	b.n	800021e <delay+0x1a>
 8000218:	68bb      	ldr	r3, [r7, #8]
 800021a:	3301      	adds	r3, #1
 800021c:	60bb      	str	r3, [r7, #8]
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	2bfe      	cmp	r3, #254	; 0xfe
 8000222:	ddf9      	ble.n	8000218 <delay+0x14>
    for (int i = 0; i < time; i++) {
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	3301      	adds	r3, #1
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	68fa      	ldr	r2, [r7, #12]
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	429a      	cmp	r2, r3
 8000230:	dbef      	blt.n	8000212 <delay+0xe>
    }
}
 8000232:	bf00      	nop
 8000234:	bf00      	nop
 8000236:	3714      	adds	r7, #20
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr
	...

08000240 <main>:
int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	clock_init();
 8000244:	f7ff ff94 	bl	8000170 <clock_init>
	gpio_init();
 8000248:	f7ff ffa6 	bl	8000198 <gpio_init>

    /* Loop forever */
	for(;;){

		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 800024c:	2102      	movs	r1, #2
 800024e:	4815      	ldr	r0, [pc, #84]	; (80002a4 <main+0x64>)
 8000250:	f000 f98d 	bl	800056e <MCAL_GPIO_ReadPin>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d10b      	bne.n	8000272 <main+0x32>

			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800025a:	2102      	movs	r1, #2
 800025c:	4812      	ldr	r0, [pc, #72]	; (80002a8 <main+0x68>)
 800025e:	f000 f99d 	bl	800059c <MCAL_GPIO_TogglePin>
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0); //SINGLE PRESSING
 8000262:	bf00      	nop
 8000264:	2102      	movs	r1, #2
 8000266:	480f      	ldr	r0, [pc, #60]	; (80002a4 <main+0x64>)
 8000268:	f000 f981 	bl	800056e <MCAL_GPIO_ReadPin>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d0f8      	beq.n	8000264 <main+0x24>

		}
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13)==1){
 8000272:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000276:	480b      	ldr	r0, [pc, #44]	; (80002a4 <main+0x64>)
 8000278:	f000 f979 	bl	800056e <MCAL_GPIO_ReadPin>
 800027c:	4603      	mov	r3, r0
 800027e:	2b01      	cmp	r3, #1
 8000280:	d10c      	bne.n	800029c <main+0x5c>

			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000282:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000286:	4808      	ldr	r0, [pc, #32]	; (80002a8 <main+0x68>)
 8000288:	f000 f988 	bl	800059c <MCAL_GPIO_TogglePin>
			while(MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)==1); //Multi PRESSING
 800028c:	bf00      	nop
 800028e:	2102      	movs	r1, #2
 8000290:	4805      	ldr	r0, [pc, #20]	; (80002a8 <main+0x68>)
 8000292:	f000 f96c 	bl	800056e <MCAL_GPIO_ReadPin>
 8000296:	4603      	mov	r3, r0
 8000298:	2b01      	cmp	r3, #1
 800029a:	d0f8      	beq.n	800028e <main+0x4e>

		}

		delay(1);
 800029c:	2001      	movs	r0, #1
 800029e:	f7ff ffb1 	bl	8000204 <delay>
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 80002a2:	e7d3      	b.n	800024c <main+0xc>
 80002a4:	40010800 	.word	0x40010800
 80002a8:	40010c00 	.word	0x40010c00

080002ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b4:	480c      	ldr	r0, [pc, #48]	; (80002e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b6:	490d      	ldr	r1, [pc, #52]	; (80002ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b8:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <LoopForever+0xe>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002bc:	e002      	b.n	80002c4 <LoopCopyDataInit>

080002be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c2:	3304      	adds	r3, #4

080002c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c8:	d3f9      	bcc.n	80002be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ca:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002cc:	4c0a      	ldr	r4, [pc, #40]	; (80002f8 <LoopForever+0x16>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d0:	e001      	b.n	80002d6 <LoopFillZerobss>

080002d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d4:	3204      	adds	r2, #4

080002d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d8:	d3fb      	bcc.n	80002d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002da:	f000 f971 	bl	80005c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002de:	f7ff ffaf 	bl	8000240 <main>

080002e2 <LoopForever>:

LoopForever:
  b LoopForever
 80002e2:	e7fe      	b.n	80002e2 <LoopForever>
  ldr   r0, =_estack
 80002e4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f0:	08000628 	.word	0x08000628
  ldr r2, =_sbss
 80002f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f8:	2000001c 	.word	0x2000001c

080002fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002fc:	e7fe      	b.n	80002fc <ADC1_2_IRQHandler>
	...

08000300 <Get_CRLH_Position>:
 *      Author: Muhamad Elalawy
 */
#include "stm32f103c6_GPIO_Driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber){
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 800030a:	88fb      	ldrh	r3, [r7, #6]
 800030c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000310:	f000 80a5 	beq.w	800045e <Get_CRLH_Position+0x15e>
 8000314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000318:	f300 80a3 	bgt.w	8000462 <Get_CRLH_Position+0x162>
 800031c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000320:	f000 809b 	beq.w	800045a <Get_CRLH_Position+0x15a>
 8000324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000328:	f300 809b 	bgt.w	8000462 <Get_CRLH_Position+0x162>
 800032c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000330:	f000 8091 	beq.w	8000456 <Get_CRLH_Position+0x156>
 8000334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000338:	f300 8093 	bgt.w	8000462 <Get_CRLH_Position+0x162>
 800033c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000340:	f000 8087 	beq.w	8000452 <Get_CRLH_Position+0x152>
 8000344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000348:	f300 808b 	bgt.w	8000462 <Get_CRLH_Position+0x162>
 800034c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000350:	d07d      	beq.n	800044e <Get_CRLH_Position+0x14e>
 8000352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000356:	f300 8084 	bgt.w	8000462 <Get_CRLH_Position+0x162>
 800035a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800035e:	d074      	beq.n	800044a <Get_CRLH_Position+0x14a>
 8000360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000364:	dc7d      	bgt.n	8000462 <Get_CRLH_Position+0x162>
 8000366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800036a:	d06c      	beq.n	8000446 <Get_CRLH_Position+0x146>
 800036c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000370:	dc77      	bgt.n	8000462 <Get_CRLH_Position+0x162>
 8000372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000376:	d064      	beq.n	8000442 <Get_CRLH_Position+0x142>
 8000378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800037c:	dc71      	bgt.n	8000462 <Get_CRLH_Position+0x162>
 800037e:	2b80      	cmp	r3, #128	; 0x80
 8000380:	d05d      	beq.n	800043e <Get_CRLH_Position+0x13e>
 8000382:	2b80      	cmp	r3, #128	; 0x80
 8000384:	dc6d      	bgt.n	8000462 <Get_CRLH_Position+0x162>
 8000386:	2b20      	cmp	r3, #32
 8000388:	dc48      	bgt.n	800041c <Get_CRLH_Position+0x11c>
 800038a:	2b00      	cmp	r3, #0
 800038c:	dd69      	ble.n	8000462 <Get_CRLH_Position+0x162>
 800038e:	3b01      	subs	r3, #1
 8000390:	2b1f      	cmp	r3, #31
 8000392:	d866      	bhi.n	8000462 <Get_CRLH_Position+0x162>
 8000394:	a201      	add	r2, pc, #4	; (adr r2, 800039c <Get_CRLH_Position+0x9c>)
 8000396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800039a:	bf00      	nop
 800039c:	08000423 	.word	0x08000423
 80003a0:	08000427 	.word	0x08000427
 80003a4:	08000463 	.word	0x08000463
 80003a8:	0800042b 	.word	0x0800042b
 80003ac:	08000463 	.word	0x08000463
 80003b0:	08000463 	.word	0x08000463
 80003b4:	08000463 	.word	0x08000463
 80003b8:	0800042f 	.word	0x0800042f
 80003bc:	08000463 	.word	0x08000463
 80003c0:	08000463 	.word	0x08000463
 80003c4:	08000463 	.word	0x08000463
 80003c8:	08000463 	.word	0x08000463
 80003cc:	08000463 	.word	0x08000463
 80003d0:	08000463 	.word	0x08000463
 80003d4:	08000463 	.word	0x08000463
 80003d8:	08000433 	.word	0x08000433
 80003dc:	08000463 	.word	0x08000463
 80003e0:	08000463 	.word	0x08000463
 80003e4:	08000463 	.word	0x08000463
 80003e8:	08000463 	.word	0x08000463
 80003ec:	08000463 	.word	0x08000463
 80003f0:	08000463 	.word	0x08000463
 80003f4:	08000463 	.word	0x08000463
 80003f8:	08000463 	.word	0x08000463
 80003fc:	08000463 	.word	0x08000463
 8000400:	08000463 	.word	0x08000463
 8000404:	08000463 	.word	0x08000463
 8000408:	08000463 	.word	0x08000463
 800040c:	08000463 	.word	0x08000463
 8000410:	08000463 	.word	0x08000463
 8000414:	08000463 	.word	0x08000463
 8000418:	08000437 	.word	0x08000437
 800041c:	2b40      	cmp	r3, #64	; 0x40
 800041e:	d00c      	beq.n	800043a <Get_CRLH_Position+0x13a>
 8000420:	e01f      	b.n	8000462 <Get_CRLH_Position+0x162>

	case GPIO_PIN_0:
		return 0;
 8000422:	2300      	movs	r3, #0
 8000424:	e01e      	b.n	8000464 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8000426:	2304      	movs	r3, #4
 8000428:	e01c      	b.n	8000464 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 800042a:	2308      	movs	r3, #8
 800042c:	e01a      	b.n	8000464 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 800042e:	230c      	movs	r3, #12
 8000430:	e018      	b.n	8000464 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 8000432:	2310      	movs	r3, #16
 8000434:	e016      	b.n	8000464 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 8000436:	2314      	movs	r3, #20
 8000438:	e014      	b.n	8000464 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 800043a:	2318      	movs	r3, #24
 800043c:	e012      	b.n	8000464 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 800043e:	231c      	movs	r3, #28
 8000440:	e010      	b.n	8000464 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 8000442:	2300      	movs	r3, #0
 8000444:	e00e      	b.n	8000464 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 8000446:	2304      	movs	r3, #4
 8000448:	e00c      	b.n	8000464 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 800044a:	2308      	movs	r3, #8
 800044c:	e00a      	b.n	8000464 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 800044e:	230c      	movs	r3, #12
 8000450:	e008      	b.n	8000464 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 8000452:	2310      	movs	r3, #16
 8000454:	e006      	b.n	8000464 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 8000456:	2314      	movs	r3, #20
 8000458:	e004      	b.n	8000464 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 800045a:	2318      	movs	r3, #24
 800045c:	e002      	b.n	8000464 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 800045e:	231c      	movs	r3, #28
 8000460:	e000      	b.n	8000464 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 8000462:	2300      	movs	r3, #0
}
 8000464:	4618      	mov	r0, r3
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop

08000470 <MCAL_GPIO_Init>:
 * - For input pull-up or pull-down configuration, the function sets or clears the ODR bit.
 * - Internally determines the correct configuration register (CRL for pins 0–7, CRH for 8–15).
 *
 * @retval None
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_Pin_Config_t *Pin_Config){
 8000470:	b590      	push	{r4, r7, lr}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
	//CRL -> for pins 0:7
	//CRH -> for pins 8:15
	volatile uint32_t *ConfigRegiter = NULL;
 800047a:	2300      	movs	r3, #0
 800047c:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_CONFIG = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	73fb      	strb	r3, [r7, #15]

	ConfigRegiter = (Pin_Config->GPIO_Pin_Number < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	881b      	ldrh	r3, [r3, #0]
 8000486:	2bff      	cmp	r3, #255	; 0xff
 8000488:	d801      	bhi.n	800048e <MCAL_GPIO_Init+0x1e>
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	e001      	b.n	8000492 <MCAL_GPIO_Init+0x22>
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	3304      	adds	r3, #4
 8000492:	60bb      	str	r3, [r7, #8]
	//reset CNF , MODE
	(*ConfigRegiter) &= ~(0xF << Get_CRLH_Position(Pin_Config->GPIO_Pin_Number));
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ff31 	bl	8000300 <Get_CRLH_Position>
 800049e:	4603      	mov	r3, r0
 80004a0:	461a      	mov	r2, r3
 80004a2:	230f      	movs	r3, #15
 80004a4:	4093      	lsls	r3, r2
 80004a6:	43da      	mvns	r2, r3
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	401a      	ands	r2, r3
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	601a      	str	r2, [r3, #0]

	//if pin is OUTPUT
	if(Pin_Config->GPIO_Mode == GPIO_MODE_OUTPUT_PP || Pin_Config->GPIO_Mode == GPIO_MODE_OUTPUT_OD||Pin_Config->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PP||Pin_Config->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD){
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	789b      	ldrb	r3, [r3, #2]
 80004b6:	2b04      	cmp	r3, #4
 80004b8:	d00b      	beq.n	80004d2 <MCAL_GPIO_Init+0x62>
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	789b      	ldrb	r3, [r3, #2]
 80004be:	2b05      	cmp	r3, #5
 80004c0:	d007      	beq.n	80004d2 <MCAL_GPIO_Init+0x62>
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	789b      	ldrb	r3, [r3, #2]
 80004c6:	2b06      	cmp	r3, #6
 80004c8:	d003      	beq.n	80004d2 <MCAL_GPIO_Init+0x62>
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	789b      	ldrb	r3, [r3, #2]
 80004ce:	2b07      	cmp	r3, #7
 80004d0:	d10e      	bne.n	80004f0 <MCAL_GPIO_Init+0x80>

		PIN_CONFIG = ((((Pin_Config->GPIO_Mode - 4) << 2) | (Pin_Config->GPIO_Output_Speed )) &0X0F);
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	789b      	ldrb	r3, [r3, #2]
 80004d6:	3b04      	subs	r3, #4
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	b25a      	sxtb	r2, r3
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	78db      	ldrb	r3, [r3, #3]
 80004e0:	b25b      	sxtb	r3, r3
 80004e2:	4313      	orrs	r3, r2
 80004e4:	b25b      	sxtb	r3, r3
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	f003 030f 	and.w	r3, r3, #15
 80004ec:	73fb      	strb	r3, [r7, #15]
 80004ee:	e02c      	b.n	800054a <MCAL_GPIO_Init+0xda>


	//if pin is INPUT
	else
	{
		if(Pin_Config->GPIO_Mode == GPIO_MODE_INPUT_FLO || Pin_Config->GPIO_Mode == GPIO_MODE_Analog){
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	789b      	ldrb	r3, [r3, #2]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d003      	beq.n	8000500 <MCAL_GPIO_Init+0x90>
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	789b      	ldrb	r3, [r3, #2]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d107      	bne.n	8000510 <MCAL_GPIO_Init+0xa0>

			PIN_CONFIG = (((Pin_Config->GPIO_Mode) << 2)  &0X0F);
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	789b      	ldrb	r3, [r3, #2]
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	b2db      	uxtb	r3, r3
 8000508:	f003 030f 	and.w	r3, r3, #15
 800050c:	73fb      	strb	r3, [r7, #15]
 800050e:	e01c      	b.n	800054a <MCAL_GPIO_Init+0xda>
		}
		else if(Pin_Config->GPIO_Mode == GPIO_MODE_AF_INPUT)
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	789b      	ldrb	r3, [r3, #2]
 8000514:	2b08      	cmp	r3, #8
 8000516:	d102      	bne.n	800051e <MCAL_GPIO_Init+0xae>
		{
			PIN_CONFIG = ((GPIO_MODE_INPUT_FLO << 2)  &0X0F);
 8000518:	2304      	movs	r3, #4
 800051a:	73fb      	strb	r3, [r7, #15]
 800051c:	e015      	b.n	800054a <MCAL_GPIO_Init+0xda>

		}
		else //input PU/PD
		{
			PIN_CONFIG = ((GPIO_MODE_INPUT_PU << 2)  &0X0F);
 800051e:	2308      	movs	r3, #8
 8000520:	73fb      	strb	r3, [r7, #15]
			if(Pin_Config->GPIO_Mode == GPIO_MODE_INPUT_PU)//PU
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	789b      	ldrb	r3, [r3, #2]
 8000526:	2b02      	cmp	r3, #2
 8000528:	d107      	bne.n	800053a <MCAL_GPIO_Init+0xca>
			{
				GPIOx->ODR |= Pin_Config->GPIO_Pin_Number;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	8812      	ldrh	r2, [r2, #0]
 8000532:	431a      	orrs	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	e007      	b.n	800054a <MCAL_GPIO_Init+0xda>
			}
			else//PD
			{
				GPIOx->ODR &=  ~(Pin_Config->GPIO_Pin_Number);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	68db      	ldr	r3, [r3, #12]
 800053e:	683a      	ldr	r2, [r7, #0]
 8000540:	8812      	ldrh	r2, [r2, #0]
 8000542:	43d2      	mvns	r2, r2
 8000544:	401a      	ands	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//write on CRL | CRH
	(*ConfigRegiter) |= PIN_CONFIG << Get_CRLH_Position(Pin_Config->GPIO_Pin_Number);
 800054a:	7bfc      	ldrb	r4, [r7, #15]
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff fed5 	bl	8000300 <Get_CRLH_Position>
 8000556:	4603      	mov	r3, r0
 8000558:	fa04 f203 	lsl.w	r2, r4, r3
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	431a      	orrs	r2, r3
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	601a      	str	r2, [r3, #0]


}
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	bd90      	pop	{r4, r7, pc}

0800056e <MCAL_GPIO_ReadPin>:
 *                       a value of @ref GPIO_PINS (e.g., GPIO_PIN_0, GPIO_PIN_1, ...).
 *
 * @retval GPIO_PIN_SET     The pin is at high logic level.
 * @retval GPIO_PIN_RESET   The pin is at low logic level.
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx,uint16_t PinNumber){
 800056e:	b480      	push	{r7}
 8000570:	b085      	sub	sp, #20
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
 8000576:	460b      	mov	r3, r1
 8000578:	807b      	strh	r3, [r7, #2]

	uint8_t Bit_Status;
	if((GPIOx->IDR & PinNumber) != (uint32_t)GPIO_PIN_RESET){
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	689a      	ldr	r2, [r3, #8]
 800057e:	887b      	ldrh	r3, [r7, #2]
 8000580:	4013      	ands	r3, r2
 8000582:	2b00      	cmp	r3, #0
 8000584:	d002      	beq.n	800058c <MCAL_GPIO_ReadPin+0x1e>
		Bit_Status = GPIO_PIN_SET;
 8000586:	2301      	movs	r3, #1
 8000588:	73fb      	strb	r3, [r7, #15]
 800058a:	e001      	b.n	8000590 <MCAL_GPIO_ReadPin+0x22>
	}
	else
	{
		Bit_Status = GPIO_PIN_RESET;
 800058c:	2300      	movs	r3, #0
 800058e:	73fb      	strb	r3, [r7, #15]

	}

	return Bit_Status;
 8000590:	7bfb      	ldrb	r3, [r7, #15]

}
 8000592:	4618      	mov	r0, r3
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <MCAL_GPIO_TogglePin>:
 * @retval None
 *
 * @note This operation affects only the specified pin. Other pins remain unchanged.
 */

void MCAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx,uint16_t PinNumber){
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	807b      	strh	r3, [r7, #2]


	GPIOx->ODR ^= PinNumber;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	68da      	ldr	r2, [r3, #12]
 80005ac:	887b      	ldrh	r3, [r7, #2]
 80005ae:	405a      	eors	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	60da      	str	r2, [r3, #12]

}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr
	...

080005c0 <__libc_init_array>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	2600      	movs	r6, #0
 80005c4:	4d0c      	ldr	r5, [pc, #48]	; (80005f8 <__libc_init_array+0x38>)
 80005c6:	4c0d      	ldr	r4, [pc, #52]	; (80005fc <__libc_init_array+0x3c>)
 80005c8:	1b64      	subs	r4, r4, r5
 80005ca:	10a4      	asrs	r4, r4, #2
 80005cc:	42a6      	cmp	r6, r4
 80005ce:	d109      	bne.n	80005e4 <__libc_init_array+0x24>
 80005d0:	f000 f81a 	bl	8000608 <_init>
 80005d4:	2600      	movs	r6, #0
 80005d6:	4d0a      	ldr	r5, [pc, #40]	; (8000600 <__libc_init_array+0x40>)
 80005d8:	4c0a      	ldr	r4, [pc, #40]	; (8000604 <__libc_init_array+0x44>)
 80005da:	1b64      	subs	r4, r4, r5
 80005dc:	10a4      	asrs	r4, r4, #2
 80005de:	42a6      	cmp	r6, r4
 80005e0:	d105      	bne.n	80005ee <__libc_init_array+0x2e>
 80005e2:	bd70      	pop	{r4, r5, r6, pc}
 80005e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80005e8:	4798      	blx	r3
 80005ea:	3601      	adds	r6, #1
 80005ec:	e7ee      	b.n	80005cc <__libc_init_array+0xc>
 80005ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80005f2:	4798      	blx	r3
 80005f4:	3601      	adds	r6, #1
 80005f6:	e7f2      	b.n	80005de <__libc_init_array+0x1e>
 80005f8:	08000620 	.word	0x08000620
 80005fc:	08000620 	.word	0x08000620
 8000600:	08000620 	.word	0x08000620
 8000604:	08000624 	.word	0x08000624

08000608 <_init>:
 8000608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060a:	bf00      	nop
 800060c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800060e:	bc08      	pop	{r3}
 8000610:	469e      	mov	lr, r3
 8000612:	4770      	bx	lr

08000614 <_fini>:
 8000614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000616:	bf00      	nop
 8000618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800061a:	bc08      	pop	{r3}
 800061c:	469e      	mov	lr, r3
 800061e:	4770      	bx	lr
